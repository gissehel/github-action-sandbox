# This workflow requires definition of:
# - vars.DOCKER_HUB_USER
# - secrets.DOCKER_HUB_TOKEN

name: "build"

on:
  workflow_dispatch:
  schedule:
    - cron: '23 13 * * *'  
  push:
    branches:
      - "*"
    tags:
      - "v*.*.*"
    pull_request:
      branches:
        - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Set env vars"
        run: |
          # TIPS!! Works as an export replacement, that handles GITHUB_ENV
          export_ga() {
            for _name in "${@}"
            do
              local _key="${_name%%=*}"
              local _value="${_name#*=}"
              [ "${_key}" == "${_name}" ] && _value="${!_name}"
              export $_key="${_value}"
              echo "${_key}=${_value}" >> "${GITHUB_ENV}"
            done
          }
          
          export_ga GITHUB_SHA_SHORT="$(git rev-parse --short HEAD)"

          export_ga GH_REGISTRY="ghcr.io"
          export_ga GH_USER="${{ github.actor }}"
          export_ga GH_OWNER="${{ github.repository_owner }}"
          export_ga DOCKER_HUB_REGISTRY="docker.io"
          export_ga DOCKER_HUB_USER="${{ vars.DOCKER_HUB_USER }}"
          export_ga REPO_NAME="${{ github.event.repository.name }}"
          export_ga IMAGE_NAME="${REPO_NAME}"
          
          export_ga REFNAME="$(echo "${{ github.ref }}" | sed -e 's/.*\///')"
          export_ga VERSION="${REFNAME}"
          export_ga GH_IMAGE_NAME="${GH_REGISTRY}/${GH_OWNER}/${REPO_NAME}"
          export_ga DOCKER_HUB_IMAGE_NAME="${DOCKER_HUB_REGISTRY}/${DOCKER_HUB_USER}/${REPO_NAME}"
          export_ga MAIN_DOCKER_TAG="${GH_IMAGE_NAME}:${GITHUB_SHA_SHORT}"

          export_ga IS_PR="${{ github.event_name == 'pull_request' }}"
          export_ga IS_RELEASE="${{ startsWith(github.ref, 'refs/tags/v') }}"

      - name: "Install cosign"
        if: env.IS_PR != 'true'
        uses: "sigstore/cosign-installer@v3.0.5"
        with:
          cosign-release: "v2.0.2"

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: "Setup Docker buildx"
        uses: "docker/setup-buildx-action@v2.5.0"

      - name: "Login to github container registry"
        if: env.IS_PR != 'true'
        uses: "docker/login-action@v2.1.0"
        with:
          registry: "${{ env.GH_REGISTRY }}"
          username: "${{ env.GH_USER }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: "Login to docker hub container registry"
        if: env.IS_RELEASE == 'true'
        uses: "docker/login-action@v2.1.0"
        with:
          registry: "${{ env.DOCKER_HUB_REGISTRY }}"
          username: "${{ env.DOCKER_HUB_USER }}"
          password: "${{ secrets.DOCKER_HUB_TOKEN }}"

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: "Extract Docker metadata (if not a release)"
        id: "meta_not_release"
        uses: "docker/metadata-action@v4.4.0"
        if: env.IS_RELEASE != 'true'
        with:
          tags: |
            type=sha,enable=true,priority=100,prefix=,suffix=,format=short
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
          images: |
            ${{ env.GH_IMAGE_NAME }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: "Extract Docker metadata (if a release)"
        id: "meta_release"
        uses: "docker/metadata-action@v4.4.0"
        if: env.IS_RELEASE == 'true'
        with:
          images: |
            ${{ env.GH_IMAGE_NAME }}
            ${{ env.DOCKER_HUB_IMAGE_NAME }}

      - name: "Build image ${{ env.GH_IMAGE_NAME }} ${{ env.GITHUB_SHA_SHORT }}"
        uses: "docker/build-push-action@v4.0.0"
        with:
          context: .
          push: ${{ env.IS_PR != 'true' }}
          tags: |
            ${{ env.MAIN_DOCKER_TAG }}
            ${{ steps.meta_not_release.outputs.tags }}
            ${{ steps.meta_release.outputs.tags }}
          labels: |
            ${{ steps.meta_not_release.outputs.labels }}
            ${{ steps.meta_release.outputs.labels }}          
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: "Create a dummy file"
        run: |
          echo "dummy" > ./poide

      - name: "Create release"
        if: env.IS_RELEASE == 'true'
        uses: "softprops/action-gh-release@v1"
        with:
          files: |
            ./poide

